<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        R0lGODlhvgDIAIcAAP//AIJVI45dJpplKXZNIGpFHV49GsWOCuandTw7O+SfaNx/NOivgoljBmtNBOKX
        W+q4uA3FxT4sAuCPTt6HQdSZCyIiItp3J85wI8FpIbCjowAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        ACH/C05FVFNDQVBFMi4wAwEAAAAh+QQBCAAAACwAAAAAvgDIAAAI/wABCBxIsKDBgwgTKlzIsKHDhxAj
        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
        e//74A+/+MdP/vKbXykBAQA7
</value>
  </data>
</root>